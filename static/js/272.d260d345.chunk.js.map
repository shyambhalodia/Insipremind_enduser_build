{"version":3,"file":"static/js/272.d260d345.chunk.js","mappings":"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","sources":["components/pages/auth/signup/OtpVerification.jsx","pages/auth/signup/OtpVerify.jsx","../node_modules/react-cookie/es6/useCookies.js","../node_modules/react-cookie/es6/utils.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { get, isEmpty } from \"lodash\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\r\nimport OtpInput from \"react-otp-input\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  setAuthToken,\r\n  setIsLoggedIn\r\n} from \"../../../../store/slice/auth/authentication/authSlice\";\r\nimport {\r\n  postOtpResend,\r\n  postOtpVerification\r\n} from \"../../../../store/slice/auth/signup/otpVerificationSlice\";\r\nimport {\r\n  getIsphoneNumber,\r\n  getUserData\r\n} from \"../../../../store/slice/auth/signup/signupSlice\";\r\nimport ComponentStyle from \"../../../../styles/ComponentStyle.module.css\";\r\nimport { expireTime } from \"../../../hooks/cookie\";\r\nimport translate from \"../../../hooks/translate\";\r\n\r\nconst OtpVerification = () => {\r\n  const [otpCode, setOtpCode] = useState(\"\");\r\n  const [erorrAlert, setErorrAlert] = useState(false);\r\n  const { state } = useLocation();\r\n  const navigate = useNavigate();\r\n  const [, setCookie] = useCookies();\r\n  const { executeRecaptcha } = useGoogleReCaptcha();\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector(getUserData);\r\n  const isPhoneNumber = useSelector(getIsphoneNumber);\r\n\r\n  useEffect(() => {\r\n    get(state, \"isOtpVerified\", null) === null ||\r\n      (isEmpty(get(userDetails, \"userId\", \"\")) === true && navigate(\"/signup\"));\r\n  });\r\n\r\n  const handleChange = (code) => {\r\n    setOtpCode(code);\r\n  };\r\n\r\n  const handleSubmitOtp = async () => {\r\n    if (otpCode.length === 6) {\r\n      setErorrAlert(false);\r\n      const payload = {\r\n        userId: userDetails.userId,\r\n        otp: otpCode,\r\n      };\r\n      const res = await dispatch(postOtpVerification(payload))\r\n        .unwrap()\r\n        .then((result) => {\r\n          if (result.status === true && get(result.data, \"token\", \"\") !== \"\") {\r\n            const userData = {\r\n              email: get(userDetails, \"email\"),\r\n              mobile: get(userDetails, \"mobile\"),\r\n              token: get(result.data, \"token\"),\r\n            };\r\n            setCookie(\"user_data\", userData, {\r\n              path: \"/\",\r\n              expires: expireTime,\r\n            });\r\n            dispatch(setAuthToken(result.data.token));\r\n            dispatch(setIsLoggedIn(true));\r\n            navigate(\"/health-info\");\r\n            setOtpCode(\"\");\r\n          } else {\r\n            toast.error(result.message);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"error OTP verify\", error);\r\n        });\r\n      return res;\r\n    } else {\r\n      setErorrAlert(true);\r\n    }\r\n  };\r\n\r\n  const resendOtp = async () => {\r\n    if (!executeRecaptcha) {\r\n      toast.error(\"You are not Authorized\");\r\n      return;\r\n    }\r\n    const token = await executeRecaptcha(\"yourAction\");\r\n    const payload = {\r\n      code: get(userDetails, \"code\", \"\"),\r\n      mobile: get(userDetails, \"mobile\", \"\"),\r\n      email: get(userDetails, \"email\", \"\"),\r\n      googleRecaptchaToken: token,\r\n    };\r\n    const res = await dispatch(postOtpResend(payload))\r\n      .unwrap()\r\n      .then((result) => {\r\n        if (result.status) {\r\n          toast.success(result.message);\r\n        } else {\r\n          toast.error(result.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"OTP resend error========>\", error);\r\n      });\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"div\"\r\n        className=\"d-flex align-items-center justify-content-center h-100\"\r\n      >\r\n        <Grid container>\r\n          <Grid item sm={9} md={10} lg={8} sx={{ mx: { md: \"0\", xs: \"auto\" } }}>\r\n            <Typography variant=\"h4\" align=\"center\" mb={2}>\r\n              {translate(\"common_otp_verification\")}\r\n            </Typography>\r\n            <Typography variant=\"body1\" align=\"center\" mb={2}>\r\n              {translate(\"common_code_sent_to\")}\r\n              <Typography\r\n                variant=\"body1\"\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                ml={1}\r\n              >\r\n                {isPhoneNumber\r\n                  ? get(userDetails, \"mobile\", \"\")\r\n                  : get(userDetails, \"email\", \"\")}\r\n              </Typography>\r\n            </Typography>\r\n            <Grid container spacing={2} justifyContent=\"center\">\r\n              <Grid item xs={12}>\r\n                <OtpInput\r\n                  value={otpCode}\r\n                  onChange={handleChange}\r\n                  numInputs={6}\r\n                  separator={<span style={{ width: \"8px\" }}></span>}\r\n                  isInputNum={true}\r\n                  shouldAutoFocus={true}\r\n                  className={ComponentStyle.otp_inputs}\r\n                  containerStyle={{\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                  hasErrored={erorrAlert}\r\n                  errorStyle={{ color: \"#b71c1c\", borderColor: \"#b71c1c\" }}\r\n                  inputStyle={{\r\n                    border: \"1px solid #CFD3DB\",\r\n                    borderRadius: \"8px\",\r\n                    width: \"40px\",\r\n                    height: \"40px\",\r\n                    fontSize: \"16px\",\r\n                    color: \"#777E89\",\r\n                    fontWeight: \"400\",\r\n                    caretColor: \"#777E89\",\r\n                    margin: \"0 auto\",\r\n                  }}\r\n                  focusStyle={{\r\n                    border: \"1px solid #CFD3DB\",\r\n                    outline: \"none\",\r\n                  }}\r\n                />\r\n                {erorrAlert && (\r\n                  <FormHelperText\r\n                    error={true}\r\n                    sx={{ textAlign: \"center\", mt: 1 }}\r\n                  >\r\n                    {translate(\r\n                      \"common_error_all_fields_are_required\"\r\n                    )}\r\n                  </FormHelperText>\r\n                )}\r\n                <Typography variant=\"body1\" align=\"center\" mt={2}>\r\n                  {translate(\"common_didn't_receive_code\")} ?\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"primary\"\r\n                    component=\"span\"\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    ml={1}\r\n                    onClick={resendOtp}\r\n                  >\r\n                    {translate(\"common_request_again\")}\r\n                  </Typography>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  type=\"submit\"\r\n                  onClick={handleSubmitOtp}\r\n                >\r\n                  {translate(\"common_verify_now\")}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OtpVerification;\r\n","import Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport OtpVerification from \"../../../components/pages/auth/signup/OtpVerification\";\r\nimport ImageComponent from \"../../../components/pages/auth/signup/ImageComponent\";\r\nimport { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\";\r\n\r\nconst OtpVerify = () => {\r\n  const GOOGLE_RECAPTCHA_KEY = process.env.REACT_APP_GOOGLE_RECAPTCHA_KEY;\r\n\r\n  return (\r\n    <Box\r\n      component=\"section\"\r\n      sx={{ py: { sm: 6.4, xs: 4 } }}\r\n      className=\"d-flex align-items-center justify-content-center w-100\"\r\n    >\r\n      <Container maxWidth=\"xl\">\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          sx={{ justifyContent: { md: \"space-between\", xs: \"center\" } }}\r\n          column={12}\r\n        >\r\n          <Grid item lg={6} md={6}>\r\n            <GoogleReCaptchaProvider reCaptchaKey={GOOGLE_RECAPTCHA_KEY}>\r\n              <OtpVerification />\r\n            </GoogleReCaptchaProvider>\r\n          </Grid>\r\n          <Grid item lg={5} md={6}>\r\n            <ImageComponent />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OtpVerify;\r\n","import { useContext, useLayoutEffect, useState, useRef, useMemo } from 'react';\r\nimport CookiesContext from './CookiesContext';\r\nimport { isInBrowser } from './utils';\r\nexport default function useCookies(dependencies) {\r\n    var cookies = useContext(CookiesContext);\r\n    if (!cookies) {\r\n        throw new Error('Missing <CookiesProvider>');\r\n    }\r\n    var initialCookies = cookies.getAll();\r\n    var _a = useState(initialCookies), allCookies = _a[0], setCookies = _a[1];\r\n    var previousCookiesRef = useRef(allCookies);\r\n    if (isInBrowser()) {\r\n        useLayoutEffect(function () {\r\n            function onChange() {\r\n                var newCookies = cookies.getAll();\r\n                if (shouldUpdate(dependencies || null, newCookies, previousCookiesRef.current)) {\r\n                    setCookies(newCookies);\r\n                }\r\n                previousCookiesRef.current = newCookies;\r\n            }\r\n            cookies.addChangeListener(onChange);\r\n            return function () {\r\n                cookies.removeChangeListener(onChange);\r\n            };\r\n        }, [cookies]);\r\n    }\r\n    var setCookie = useMemo(function () { return cookies.set.bind(cookies); }, [cookies]);\r\n    var removeCookie = useMemo(function () { return cookies.remove.bind(cookies); }, [cookies]);\r\n    return [allCookies, setCookie, removeCookie];\r\n}\r\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\r\n    if (!dependencies) {\r\n        return true;\r\n    }\r\n    for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\r\n        var dependency = dependencies_1[_i];\r\n        if (newCookies[dependency] !== oldCookies[dependency]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","export function isInBrowser() {\r\n    return (typeof window !== 'undefined' &&\r\n        typeof window.document !== 'undefined' &&\r\n        typeof window.document.createElement !== 'undefined');\r\n}\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","otpCode","setOtpCode","_useState3","_useState4","erorrAlert","setErorrAlert","state","useLocation","navigate","useNavigate","_useCookies","useCookies","setCookie","executeRecaptcha","useGoogleReCaptcha","dispatch","useDispatch","userDetails","useSelector","getUserData","isPhoneNumber","getIsphoneNumber","useEffect","get","isEmpty","handleSubmitOtp","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","payload","res","wrap","_context","prev","next","length","userId","otp","postOtpVerification","unwrap","then","result","status","data","userData","email","mobile","token","path","expires","expireTime","setAuthToken","setIsLoggedIn","toast","error","message","catch","console","log","sent","abrupt","stop","apply","arguments","resendOtp","_ref2","_callee2","_context2","code","googleRecaptchaToken","postOtpResend","success","_jsx","_Fragment","children","Box","component","className","Grid","container","_jsxs","item","sm","md","lg","sx","mx","xs","Typography","variant","align","mb","translate","color","ml","spacing","justifyContent","OtpInput","value","onChange","numInputs","separator","style","width","isInputNum","shouldAutoFocus","ComponentStyle","otp_inputs","containerStyle","alignItems","hasErrored","errorStyle","borderColor","inputStyle","border","borderRadius","height","fontSize","fontWeight","caretColor","margin","focusStyle","outline","FormHelperText","textAlign","mt","cursor","onClick","Button","fullWidth","type","py","Container","maxWidth","column","GoogleReCaptchaProvider","reCaptchaKey","process","OtpVerification","ImageComponent","dependencies","cookies","useContext","CookiesContext","Error","initialCookies","getAll","_a","allCookies","setCookies","previousCookiesRef","useRef","window","document","createElement","useLayoutEffect","newCookies","oldCookies","_i","dependencies_1","dependency","shouldUpdate","current","addChangeListener","removeChangeListener","useMemo","set","bind","remove"],"sourceRoot":""}